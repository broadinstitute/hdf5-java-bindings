//Note: this section 'buildscript` is only for the dependencies of the buildscript itself.
// See the second 'repositories' section below for the actual dependencies of this library itself
buildscript {
    repositories {
        mavenCentral()
        jcenter() // for shadow plugin
     }
}

plugins {
    id "java"
    id 'maven'
    id 'signing'
    id "jacoco"
    id "com.github.johnrengelman.shadow" version "1.2.3"
    id "com.github.kt3k.coveralls" version "2.6.3"
    id "com.github.ben-manes.versions" version "0.12.0" //used for identifying dependencies that need updating
    id 'com.palantir.git-version' version '0.5.1' //version helper
}

repositories {
    mavenCentral()
    jcenter()

    // Locations for finding HDF and HDFJava jar files
    flatDir {
        dirs 'src/main/resources/org/broadinstitute/hdf5/'
    }

    mavenLocal()
}

jacocoTestReport {
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.7.5.201505241946"
}

//NOTE: we ignore contracts for now
compileJava {
  options.compilerArgs = ['-proc:none', '-Xlint:all','-Werror','-Xdiags:verbose']
}
compileTestJava {
  options.compilerArgs = ['-proc:none', '-Xlint:all','-Werror','-Xdiags:verbose']
}


dependencies {
    compile 'org.slf4j:slf4j-log4j12:1.7.21'

    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-math3:3.5'
    compile 'commons-io:commons-io:2.4'
    compile 'org.broadinstitute:gatk-native-bindings:0.0.3'

    testCompile 'org.testng:testng:6.9.6'

    //This jar is not available on maven central and we want to a) compile against it and b) make it available to downstream projects
    //So the workaround is to use the jar as a compile-only dependency and then mix its class files together with ours
    // when making our jar. See the unzipHDF5JAR task
    compileOnly name: 'jarhdf5-2.11.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

final isRelease = Boolean.getBoolean("release")
version = "0.1.0"
//(isRelease ? gitVersion() : gitVersion() + "-SNAPSHOT").replaceAll(".dirty", "")

logger.info("build for version:" + version)
group = 'org.broadinstitute'

defaultTasks 'jar'


// See explanation in the dependencies section for why this is done.
// This task unzips the class files from the jarhdf5 jar and dumps them
// to our build directory so that they get packaged together with our class files when we create our jar
task unzipHDF5JAR(type: Copy) {
    def zipFile = file('src/main/resources/org/broadinstitute/hdf5/jarhdf5-2.11.0.jar')
    def outputDir = file("${buildDir}/classes/main")

    from zipTree(zipFile)
    into outputDir
}

tasks.withType(Jar) {
    manifest {
        attributes 'Implementation-Title': 'HDF5-java-bindings',
                'Implementation-Version': version
    }
}

//unzip the hdf5 jar before we make our own jar
jar {dependsOn unzipHDF5JAR}

test {
    outputs.upToDateWhen { false }  //tests will never be "up to date" so you can always rerun them
    dependsOn unzipHDF5JAR          //unzip the hdf5 jar to build path because it's a compileOnly dependency so it wont' be visible otherwise
    String CI = "$System.env.CI"
    useTestNG{

    }

    // set heap size for the test JVM(s)
    minHeapSize = "1G"
    maxHeapSize = "2G"


    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("Running Test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    testLogging {
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// This is a hack to disable the java 8 default javadoc lint until we fix the html formatting
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

/**
 *This specifies what artifacts will be built and uploaded when performing a maven upload.
 */
artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

/**
 * Sign non-snapshot releases with our secret key.  This should never need to be invoked directly.
 */
signing {
    required { isRelease && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

/**
 * Upload a release to sonatype.  You must be an authorized uploader and have your sonatype
 * username and password information in your gradle properties file.  See the readme for more info.
 *
 * For releasing to your local maven repo, use gradle install
 */
uploadArchives {
    doFirst {
        println "Attempting to upload version:$version"
    }
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.findProperty("sonatypeUsername"), password: project.findProperty("sonatypePassword"))
            }

            snapshotRepository(url: "https://artifactory.broadinstitute.org/artifactory/libs-snapshot-local/") {
                authentication(userName: System.env.ARTIFACTORY_USERNAME, password: System.env.ARTIFACTORY_PASSWORD)
            }

            pom.project {
                name 'HDF5 java bindings'
                packaging 'jar'
                description 'HDF5 java bindings'
                url 'http://github.com/broadinstitute/hdf5-java-bindings'

                scm {
                    url 'scm:git@github.com:broadinstitute/hdf5-java-bindings.git'
                    connection 'scm:git@github.com:broadinstitute/hdf5-java-bindings.git'
                    developerConnection 'scm:git@github.com:broadinstitute/hdf5-java-bindings.git'
                }

                developers {
                    developer {
                        id = "gatkdev"
                        name = "GATK Development Team"
                        email = "gatk-dev-public@broadinstitute.org"
                    }
                }

                licenses {
                    license {
                        name 'BSD 3-Clause'
                        url 'https://github.com/broadinstitute/hdf5-java-bindings/blob/master/LICENSE.TXT'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}



